// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct GetWatchListRequest: APIValue {
        /// Filter
        public let filter: Operations.Filter
        /// An authentication token, obtained from plex.tv
        public let xPlexToken: String
        /// include collections in the results
        /// 
        public let includeCollections: Operations.IncludeCollections?
        /// include external media in the results
        /// 
        public let includeExternalMedia: Operations.IncludeExternalMedia?
        /// The type of library to filter. Can be "movie" or "show", or all if not present.
        /// 
        public let libtype: Operations.Libtype?
        /// The number of items to return. If not specified, all items will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// 
        public let maxresults: Int?
        /// In the format "field:dir". Available fields are "watchlistedAt" (Added At),
        /// "titleSort" (Title), "originallyAvailableAt" (Release Date), or "rating" (Critic Rating).
        /// "dir" can be "asc" or "desc"
        /// 
        public let sort: String?
        /// The number of items to return. If not specified, all items will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// By default this is 50
        /// 
        public let xPlexContainerSize: Int?
        /// The index of the first item to return. If not specified, the first item will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// By default this is 0
        /// 
        public let xPlexContainerStart: Int?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter filter: Filter
        /// - Parameter xPlexToken: An authentication token, obtained from plex.tv
        /// - Parameter includeCollections: include collections in the results
        /// 
        /// - Parameter includeExternalMedia: include external media in the results
        /// 
        /// - Parameter libtype: The type of library to filter. Can be "movie" or "show", or all if not present.
        /// 
        /// - Parameter maxresults: The number of items to return. If not specified, all items will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// 
        /// - Parameter sort: In the format "field:dir". Available fields are "watchlistedAt" (Added At),
        /// "titleSort" (Title), "originallyAvailableAt" (Release Date), or "rating" (Critic Rating).
        /// "dir" can be "asc" or "desc"
        /// 
        /// - Parameter xPlexContainerSize: The number of items to return. If not specified, all items will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// By default this is 50
        /// 
        /// - Parameter xPlexContainerStart: The index of the first item to return. If not specified, the first item will be returned.
        /// If the number of items exceeds the limit, the response will be paginated.
        /// By default this is 0
        /// 
        ///
        public init(filter: Operations.Filter, xPlexToken: String, includeCollections: Operations.IncludeCollections? = nil, includeExternalMedia: Operations.IncludeExternalMedia? = nil, libtype: Operations.Libtype? = nil, maxresults: Int? = nil, sort: String? = nil, xPlexContainerSize: Int? = nil, xPlexContainerStart: Int? = nil) {
            self.filter = filter
            self.xPlexToken = xPlexToken
            self.includeCollections = includeCollections
            self.includeExternalMedia = includeExternalMedia
            self.libtype = libtype
            self.maxresults = maxresults
            self.sort = sort
            self.xPlexContainerSize = xPlexContainerSize
            self.xPlexContainerStart = xPlexContainerStart
        }
    }}
