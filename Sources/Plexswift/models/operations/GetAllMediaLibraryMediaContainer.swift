// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct GetAllMediaLibraryMediaContainer {
        /// Indicates whether syncing is allowed.
        public let allowSync: Bool
        /// URL for the background artwork of the media container.
        public let art: String
        /// The content type or mode.
        public let content: String
        /// An plugin identifier for the media container.
        public let identifier: String
        /// The unique identifier for the library section.
        public let librarySectionID: Int
        /// The title of the library section.
        public let librarySectionTitle: String
        /// The prefix used for media tag resource paths.
        public let mediaTagPrefix: String
        /// The version number for media tags.
        public let mediaTagVersion: Int
        /// Specifies whether caching is disabled.
        public let nocache: Bool
        /// Offset value for pagination.
        public let offset: Int
        /// Number of media items returned in this response.
        public let size: Int
        /// URL for the thumbnail image of the media container.
        public let thumb: String
        /// The primary title of the media container.
        public let title1: String
        /// The secondary title of the media container.
        public let title2: String
        /// Total number of media items in the library.
        public let totalSize: Int
        /// Identifier for the view group layout.
        public let viewGroup: String
        /// The universally unique identifier for the library section.
        public let librarySectionUUID: String?
        /// The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
        /// 
        public let meta: Operations.GetAllMediaLibraryMeta?
        /// An array of metadata items.
        public let metadata: [Operations.GetAllMediaLibraryMetadata]?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter allowSync: Indicates whether syncing is allowed.
        /// - Parameter art: URL for the background artwork of the media container.
        /// - Parameter content: The content type or mode.
        /// - Parameter identifier: An plugin identifier for the media container.
        /// - Parameter librarySectionID: The unique identifier for the library section.
        /// - Parameter librarySectionTitle: The title of the library section.
        /// - Parameter mediaTagPrefix: The prefix used for media tag resource paths.
        /// - Parameter mediaTagVersion: The version number for media tags.
        /// - Parameter nocache: Specifies whether caching is disabled.
        /// - Parameter offset: Offset value for pagination.
        /// - Parameter size: Number of media items returned in this response.
        /// - Parameter thumb: URL for the thumbnail image of the media container.
        /// - Parameter title1: The primary title of the media container.
        /// - Parameter title2: The secondary title of the media container.
        /// - Parameter totalSize: Total number of media items in the library.
        /// - Parameter viewGroup: Identifier for the view group layout.
        /// - Parameter librarySectionUUID: The universally unique identifier for the library section.
        /// - Parameter meta: The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
        /// 
        /// - Parameter metadata: An array of metadata items.
        ///
        public init(allowSync: Bool, art: String, content: String, identifier: String, librarySectionID: Int, librarySectionTitle: String, mediaTagPrefix: String, mediaTagVersion: Int, nocache: Bool, offset: Int, size: Int, thumb: String, title1: String, title2: String, totalSize: Int, viewGroup: String, librarySectionUUID: String? = nil, meta: Operations.GetAllMediaLibraryMeta? = nil, metadata: [Operations.GetAllMediaLibraryMetadata]? = nil) {
            self.allowSync = allowSync
            self.art = art
            self.content = content
            self.identifier = identifier
            self.librarySectionID = librarySectionID
            self.librarySectionTitle = librarySectionTitle
            self.mediaTagPrefix = mediaTagPrefix
            self.mediaTagVersion = mediaTagVersion
            self.nocache = nocache
            self.offset = offset
            self.size = size
            self.thumb = thumb
            self.title1 = title1
            self.title2 = title2
            self.totalSize = totalSize
            self.viewGroup = viewGroup
            self.librarySectionUUID = librarySectionUUID
            self.meta = meta
            self.metadata = metadata
        }
    }}

extension Operations.GetAllMediaLibraryMediaContainer: Codable {
    enum CodingKeys: String, CodingKey {
        case allowSync
        case art
        case content
        case identifier
        case librarySectionID
        case librarySectionTitle
        case mediaTagPrefix
        case mediaTagVersion
        case nocache
        case offset
        case size
        case thumb
        case title1
        case title2
        case totalSize
        case viewGroup
        case librarySectionUUID
        case meta = "Meta"
        case metadata = "Metadata"
    }
}

