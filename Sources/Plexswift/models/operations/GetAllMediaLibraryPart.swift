// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct GetAllMediaLibraryPart {
        /// File path for the part.
        public let file: String
        /// Unique part identifier.
        public let id: Int
        /// Key to access this part.
        public let key: String
        /// File size in bytes.
        public let size: Int
        /// Indicates if the part is accessible.
        public let accessible: Bool?
        /// The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
        public let audioProfile: String?
        /// Container format of the part.
        public let container: String?
        /// Duration of the part in milliseconds.
        public let duration: Int?
        /// Indicates if the part exists.
        public let exists: Bool?
        public let has64bitOffsets: Bool?
        public let hasThumbnail: Operations.GetAllMediaLibraryHasThumbnail?
        public let indexes: String?
        /// Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
        public let optimizedForStreaming: Operations.GetAllMediaLibraryLibraryOptimizedForStreaming?
        public let packetLength: Int?
        /// An array of streams for this part.
        public let stream: [Operations.GetAllMediaLibraryStream]?
        /// Video profile for the part.
        public let videoProfile: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter file: File path for the part.
        /// - Parameter id: Unique part identifier.
        /// - Parameter key: Key to access this part.
        /// - Parameter size: File size in bytes.
        /// - Parameter accessible: Indicates if the part is accessible.
        /// - Parameter audioProfile: The audio profile used for the media (e.g., DTS, Dolby Digital, etc.).
        /// - Parameter container: Container format of the part.
        /// - Parameter duration: Duration of the part in milliseconds.
        /// - Parameter exists: Indicates if the part exists.
        /// - Parameter optimizedForStreaming: Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true
        /// - Parameter stream: An array of streams for this part.
        /// - Parameter videoProfile: Video profile for the part.
        ///
        public init(file: String, id: Int, key: String, size: Int, accessible: Bool? = nil, audioProfile: String? = nil, container: String? = nil, duration: Int? = nil, exists: Bool? = nil, has64bitOffsets: Bool? = nil, hasThumbnail: Operations.GetAllMediaLibraryHasThumbnail? = nil, indexes: String? = nil, optimizedForStreaming: Operations.GetAllMediaLibraryLibraryOptimizedForStreaming? = nil, packetLength: Int? = nil, stream: [Operations.GetAllMediaLibraryStream]? = nil, videoProfile: String? = nil) {
            self.file = file
            self.id = id
            self.key = key
            self.size = size
            self.accessible = accessible
            self.audioProfile = audioProfile
            self.container = container
            self.duration = duration
            self.exists = exists
            self.has64bitOffsets = has64bitOffsets
            self.hasThumbnail = hasThumbnail
            self.indexes = indexes
            self.optimizedForStreaming = optimizedForStreaming
            self.packetLength = packetLength
            self.stream = stream
            self.videoProfile = videoProfile
        }
    }}

extension Operations.GetAllMediaLibraryPart: Codable {
    enum CodingKeys: String, CodingKey {
        case file
        case id
        case key
        case size
        case accessible
        case audioProfile
        case container
        case duration
        case exists
        case has64bitOffsets
        case hasThumbnail
        case indexes
        case optimizedForStreaming
        case packetLength
        case stream = "Stream"
        case videoProfile
    }
}

