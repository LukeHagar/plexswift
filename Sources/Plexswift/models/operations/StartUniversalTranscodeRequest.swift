// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct StartUniversalTranscodeRequest: APIValue {
        /// Whether the media item has MDE
        @DecimalSerialized
        public private(set) var hasMDE: Double
        /// The index of the media item to transcode
        @DecimalSerialized
        public private(set) var mediaIndex: Double
        /// The index of the part to transcode
        @DecimalSerialized
        public private(set) var partIndex: Double
        /// The path to the media item to transcode
        public let path: String
        /// The protocol to use for the transcode session
        public let `protocol`: String
        /// Whether to add a debug overlay or not
        @DecimalSerialized
        public private(set) var addDebugOverlay: Double?
        /// The audio boost
        @DecimalSerialized
        public private(set) var audioBoost: Double?
        /// Whether to auto adjust quality or not
        @DecimalSerialized
        public private(set) var autoAdjustQuality: Double?
        /// Whether to use direct play or not
        @DecimalSerialized
        public private(set) var directPlay: Double?
        /// Whether to use direct stream or not
        @DecimalSerialized
        public private(set) var directStream: Double?
        /// Whether to use fast seek or not
        @DecimalSerialized
        public private(set) var fastSeek: Double?
        /// The location of the transcode session
        public let location: String?
        /// The size of the media buffer
        @DecimalSerialized
        public private(set) var mediaBufferSize: Double?
        /// The session ID
        public let session: String?
        /// The subtitles
        public let subtites: String?
        /// The size of the subtitles
        @DecimalSerialized
        public private(set) var subtitleSize: Double?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter hasMDE: Whether the media item has MDE
        /// - Parameter mediaIndex: The index of the media item to transcode
        /// - Parameter partIndex: The index of the part to transcode
        /// - Parameter path: The path to the media item to transcode
        /// - Parameter `protocol`: The protocol to use for the transcode session
        /// - Parameter addDebugOverlay: Whether to add a debug overlay or not
        /// - Parameter audioBoost: The audio boost
        /// - Parameter autoAdjustQuality: Whether to auto adjust quality or not
        /// - Parameter directPlay: Whether to use direct play or not
        /// - Parameter directStream: Whether to use direct stream or not
        /// - Parameter fastSeek: Whether to use fast seek or not
        /// - Parameter location: The location of the transcode session
        /// - Parameter mediaBufferSize: The size of the media buffer
        /// - Parameter session: The session ID
        /// - Parameter subtites: The subtitles
        /// - Parameter subtitleSize: The size of the subtitles
        ///
        public init(hasMDE: Double, mediaIndex: Double, partIndex: Double, path: String, `protocol`: String, addDebugOverlay: Double? = nil, audioBoost: Double? = nil, autoAdjustQuality: Double? = nil, directPlay: Double? = nil, directStream: Double? = nil, fastSeek: Double? = nil, location: String? = nil, mediaBufferSize: Double? = nil, session: String? = nil, subtites: String? = nil, subtitleSize: Double? = nil) {
            self._hasMDE = DecimalSerialized<Double>(wrappedValue: hasMDE)
            self._mediaIndex = DecimalSerialized<Double>(wrappedValue: mediaIndex)
            self._partIndex = DecimalSerialized<Double>(wrappedValue: partIndex)
            self.path = path
            self.`protocol` = `protocol`
            self._addDebugOverlay = DecimalSerialized<Double?>(wrappedValue: addDebugOverlay)
            self._audioBoost = DecimalSerialized<Double?>(wrappedValue: audioBoost)
            self._autoAdjustQuality = DecimalSerialized<Double?>(wrappedValue: autoAdjustQuality)
            self._directPlay = DecimalSerialized<Double?>(wrappedValue: directPlay)
            self._directStream = DecimalSerialized<Double?>(wrappedValue: directStream)
            self._fastSeek = DecimalSerialized<Double?>(wrappedValue: fastSeek)
            self.location = location
            self._mediaBufferSize = DecimalSerialized<Double?>(wrappedValue: mediaBufferSize)
            self.session = session
            self.subtites = subtites
            self._subtitleSize = DecimalSerialized<Double?>(wrappedValue: subtitleSize)
        }
    }}
extension Operations.StartUniversalTranscodeRequest {
    var hasMDEWrapper: DecimalSerialized<Double> {
        return _hasMDE
    }
    var mediaIndexWrapper: DecimalSerialized<Double> {
        return _mediaIndex
    }
    var partIndexWrapper: DecimalSerialized<Double> {
        return _partIndex
    }
    var fastSeekWrapper: DecimalSerialized<Double?> {
        return _fastSeek
    }
    var directPlayWrapper: DecimalSerialized<Double?> {
        return _directPlay
    }
    var directStreamWrapper: DecimalSerialized<Double?> {
        return _directStream
    }
    var subtitleSizeWrapper: DecimalSerialized<Double?> {
        return _subtitleSize
    }
    var audioBoostWrapper: DecimalSerialized<Double?> {
        return _audioBoost
    }
    var mediaBufferSizeWrapper: DecimalSerialized<Double?> {
        return _mediaBufferSize
    }
    var addDebugOverlayWrapper: DecimalSerialized<Double?> {
        return _addDebugOverlay
    }
    var autoAdjustQualityWrapper: DecimalSerialized<Double?> {
        return _autoAdjustQuality
    }
}
