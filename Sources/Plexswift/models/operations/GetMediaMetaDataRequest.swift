// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct GetMediaMetaDataRequest: APIValue {
        /// the id of the library item to return the children of.
        public let ratingKey: Int
        /// Trigger asynchronous metadata augmentation.
        public let asyncAugmentMetadata: Bool?
        /// Trigger asynchronous file checking.
        public let asyncCheckFiles: Bool?
        /// Trigger asynchronous refresh of analysis.
        public let asyncRefreshAnalysis: Bool?
        /// Trigger asynchronous refresh of the local media agent.
        public let asyncRefreshLocalMediaAgent: Bool?
        /// Include chapter details.
        public let includeChapters: Bool?
        /// Include concerts data if set to true.
        public let includeConcerts: Bool?
        /// Include external media data.
        public let includeExternalMedia: Bool?
        /// Include extra content (e.g. bonus features).
        public let includeExtras: Bool?
        /// Include on-deck items.
        public let includeOnDeck: Bool?
        /// Include popular leaves (episodes/chapters).
        public let includePopularLeaves: Bool?
        /// Include preferences information.
        public let includePreferences: Bool?
        /// Include reviews for the content.
        public let includeReviews: Bool?
        /// Include station data.
        public let includeStations: Bool?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter ratingKey: the id of the library item to return the children of.
        /// - Parameter asyncAugmentMetadata: Trigger asynchronous metadata augmentation.
        /// - Parameter asyncCheckFiles: Trigger asynchronous file checking.
        /// - Parameter asyncRefreshAnalysis: Trigger asynchronous refresh of analysis.
        /// - Parameter asyncRefreshLocalMediaAgent: Trigger asynchronous refresh of the local media agent.
        /// - Parameter includeChapters: Include chapter details.
        /// - Parameter includeConcerts: Include concerts data if set to true.
        /// - Parameter includeExternalMedia: Include external media data.
        /// - Parameter includeExtras: Include extra content (e.g. bonus features).
        /// - Parameter includeOnDeck: Include on-deck items.
        /// - Parameter includePopularLeaves: Include popular leaves (episodes/chapters).
        /// - Parameter includePreferences: Include preferences information.
        /// - Parameter includeReviews: Include reviews for the content.
        /// - Parameter includeStations: Include station data.
        ///
        public init(ratingKey: Int, asyncAugmentMetadata: Bool? = nil, asyncCheckFiles: Bool? = nil, asyncRefreshAnalysis: Bool? = nil, asyncRefreshLocalMediaAgent: Bool? = nil, includeChapters: Bool? = nil, includeConcerts: Bool? = nil, includeExternalMedia: Bool? = nil, includeExtras: Bool? = nil, includeOnDeck: Bool? = nil, includePopularLeaves: Bool? = nil, includePreferences: Bool? = nil, includeReviews: Bool? = nil, includeStations: Bool? = nil) {
            self.ratingKey = ratingKey
            self.asyncAugmentMetadata = asyncAugmentMetadata
            self.asyncCheckFiles = asyncCheckFiles
            self.asyncRefreshAnalysis = asyncRefreshAnalysis
            self.asyncRefreshLocalMediaAgent = asyncRefreshLocalMediaAgent
            self.includeChapters = includeChapters
            self.includeConcerts = includeConcerts
            self.includeExternalMedia = includeExternalMedia
            self.includeExtras = includeExtras
            self.includeOnDeck = includeOnDeck
            self.includePopularLeaves = includePopularLeaves
            self.includePreferences = includePreferences
            self.includeReviews = includeReviews
            self.includeStations = includeStations
        }
    }}
