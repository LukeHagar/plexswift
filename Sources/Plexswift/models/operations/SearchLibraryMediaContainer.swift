// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct SearchLibraryMediaContainer {
        public let allowSync: Bool?
        public let art: String?
        public let identifier: String?
        public let mediaTagPrefix: String?
        public let mediaTagVersion: Int?
        public let metadata: [Operations.SearchLibraryMetadata]?
        public let nocache: Bool?
        public let size: Int?
        public let thumb: String?
        public let title1: String?
        public let title2: String?
        public let viewGroup: String?
        public let viewMode: Int?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(allowSync: Bool? = nil, art: String? = nil, identifier: String? = nil, mediaTagPrefix: String? = nil, mediaTagVersion: Int? = nil, metadata: [Operations.SearchLibraryMetadata]? = nil, nocache: Bool? = nil, size: Int? = nil, thumb: String? = nil, title1: String? = nil, title2: String? = nil, viewGroup: String? = nil, viewMode: Int? = nil) {
            self.allowSync = allowSync
            self.art = art
            self.identifier = identifier
            self.mediaTagPrefix = mediaTagPrefix
            self.mediaTagVersion = mediaTagVersion
            self.metadata = metadata
            self.nocache = nocache
            self.size = size
            self.thumb = thumb
            self.title1 = title1
            self.title2 = title2
            self.viewGroup = viewGroup
            self.viewMode = viewMode
        }
    }
}

extension Operations.SearchLibraryMediaContainer: Codable {
    enum CodingKeys: String, CodingKey {
        case allowSync
        case art
        case identifier
        case mediaTagPrefix
        case mediaTagVersion
        case metadata = "Metadata"
        case nocache
        case size
        case thumb
        case title1
        case title2
        case viewGroup
        case viewMode
    }
}

