// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// Home Data
    public struct GetHomeDataResponseBody {
        public let guestEnabled: Bool?
        @DecimalSerialized
        public private(set) var guestUserID: Double?
        public let guestUserUUID: String?
        @DecimalSerialized
        public private(set) var id: Double?
        public let name: String?
        public let subscription: Bool?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(guestEnabled: Bool? = nil, guestUserID: Double? = nil, guestUserUUID: String? = nil, id: Double? = nil, name: String? = nil, subscription: Bool? = nil) {
            self.guestEnabled = guestEnabled
            self._guestUserID = DecimalSerialized<Double?>(wrappedValue: guestUserID)
            self.guestUserUUID = guestUserUUID
            self._id = DecimalSerialized<Double?>(wrappedValue: id)
            self.name = name
            self.subscription = subscription
        }
    }}

extension Operations.GetHomeDataResponseBody: Codable {
    enum CodingKeys: String, CodingKey {
        case guestEnabled
        case guestUserID
        case guestUserUUID
        case id
        case name
        case subscription
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.guestEnabled = try container.decodeIfPresent(Bool.self, forKey: .guestEnabled)
        self._guestUserID = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .guestUserID) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.guestUserUUID = try container.decodeIfPresent(String.self, forKey: .guestUserUUID)
        self._id = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .id) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.name = try container.decodeIfPresent(String.self, forKey: .name)
        self.subscription = try container.decodeIfPresent(Bool.self, forKey: .subscription)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.guestEnabled, forKey: .guestEnabled)
        if self.guestUserID != nil {
            try container.encode(self._guestUserID, forKey: .guestUserID)
        }
        try container.encodeIfPresent(self.guestUserUUID, forKey: .guestUserUUID)
        if self.id != nil {
            try container.encode(self._id, forKey: .id)
        }
        try container.encodeIfPresent(self.name, forKey: .name)
        try container.encodeIfPresent(self.subscription, forKey: .subscription)
    }
}

extension Operations.GetHomeDataResponseBody {
    var idWrapper: DecimalSerialized<Double?> {
        return _id
    }
    var guestUserIDWrapper: DecimalSerialized<Double?> {
        return _guestUserID
    }
}
