// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct GetMediaMetaDataMediaContainer {
        /// Indicates whether syncing is allowed.
        public let allowSync: Bool
        /// An plugin identifier for the media container.
        public let identifier: String
        /// The unique identifier for the library section.
        public let librarySectionID: Int
        /// The title of the library section.
        public let librarySectionTitle: String
        /// The prefix used for media tag resource paths.
        public let mediaTagPrefix: String
        /// The version number for media tags.
        public let mediaTagVersion: Int
        /// An array of metadata items.
        public let metadata: [Operations.GetMediaMetaDataMetadata]
        /// Number of media items returned in this response.
        public let size: Int
        /// The universally unique identifier for the library section.
        public let librarySectionUUID: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter allowSync: Indicates whether syncing is allowed.
        /// - Parameter identifier: An plugin identifier for the media container.
        /// - Parameter librarySectionID: The unique identifier for the library section.
        /// - Parameter librarySectionTitle: The title of the library section.
        /// - Parameter mediaTagPrefix: The prefix used for media tag resource paths.
        /// - Parameter mediaTagVersion: The version number for media tags.
        /// - Parameter metadata: An array of metadata items.
        /// - Parameter size: Number of media items returned in this response.
        /// - Parameter librarySectionUUID: The universally unique identifier for the library section.
        ///
        public init(allowSync: Bool, identifier: String, librarySectionID: Int, librarySectionTitle: String, mediaTagPrefix: String, mediaTagVersion: Int, metadata: [Operations.GetMediaMetaDataMetadata], size: Int, librarySectionUUID: String? = nil) {
            self.allowSync = allowSync
            self.identifier = identifier
            self.librarySectionID = librarySectionID
            self.librarySectionTitle = librarySectionTitle
            self.mediaTagPrefix = mediaTagPrefix
            self.mediaTagVersion = mediaTagVersion
            self.metadata = metadata
            self.size = size
            self.librarySectionUUID = librarySectionUUID
        }
    }}

extension Operations.GetMediaMetaDataMediaContainer: Codable {
    enum CodingKeys: String, CodingKey {
        case allowSync
        case identifier
        case librarySectionID
        case librarySectionTitle
        case mediaTagPrefix
        case mediaTagVersion
        case metadata = "Metadata"
        case size
        case librarySectionUUID
    }
}

